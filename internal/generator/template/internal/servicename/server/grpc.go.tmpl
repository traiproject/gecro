package server

import (
    commoncfgv1 "{{.MonorepoPrefix}}/proto/config/common/v1"

    "github.com/go-kratos/kratos/v2/log"
    "github.com/go-kratos/kratos/v2/middleware/recovery"
    "github.com/go-kratos/kratos/v2/transport/grpc"
)

// NewGRPCServer new a gRPC server.
func NewGRPCServer(c *commoncfgv1.Server, itemService *service.{{.UseCaseNamePascalCase}}Service, logger log.Logger) *grpc.Server {
    var opts =grpc.ServerOption{
        grpc.Middleware(
            recovery.Recovery(),
        ),
    }
    if c.Grpc.Network!= "" {
        opts = append(opts, grpc.Network(c.Grpc.Network))
    }
    if c.Grpc.Addr!= "" {
        opts = append(opts, grpc.Address(c.Grpc.Addr))
    }
    if c.Grpc.Timeout!= nil {
        opts = append(opts, grpc.Timeout(c.Grpc.Timeout.AsDuration()))
    }
    srv := grpc.NewServer(opts...)
    // TODO: Register gRPC services using generated v1.Register{{.UseCaseNamePascalCase}}Server(srv, itemService)
    // This requires API protos.
    return srv
}
