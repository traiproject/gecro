package main

import (
    "flag"
    "os"

    commoncfgv1 "{{.MonorepoPrefix}}/proto/config/common/v1"

    "github.com/go-kratos/kratos/v2"
    "github.com/go-kratos/kratos/v2/config"
    "github.com/go-kratos/kratos/v2/config/file"
    "github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/middleware/tracing"
    "github.com/go-kratos/kratos/v2/transport/grpc"
    "github.com/go-kratos/kratos/v2/transport/http"

	_ "go.uber.org/automaxprocs"
)

// go build -ldflags "-X main.Version=x.y.z"
var (
	// Name is the name of the compiled software.
	Name string
	// Version is the version of the compiled software.
	Version string
	// commonConf is the common config flag.
	commonConf  string
	// serviceConf is the service config flag.
	serviceConf string

    id, _ = os.Hostname()
)

func init() {
    flag.StringVar(&commonConf, "common-conf", "", "common config path (required)")
	flag.StringVar(&serviceConf, "service-conf", "", "service-specific config path (required)")
}

// newApp is the Kratos application provider.
func newApp(logger log.Logger, hs *http.Server, gs *grpc.Server) *kratos.App {
    return kratos.New(
        kratos.ID(id),
        kratos.Name(Name),
        kratos.Version(Version),
        kratos.Metadata(map[string]string{}),
        kratos.Logger(logger),
        kratos.Server(
            hs,
            gs,
        ),
    )
}

func main() {
    flag.Parse()
    logger := log.With(log.NewStdLogger(os.Stdout),
        "ts", log.DefaultTimestamp,
        "caller", log.DefaultCaller,
        "service.id", id,
        "service.name", Name,
        "service.version", Version,
		"trace.id", tracing.TraceID(),
		"span.id", tracing.SpanID(),
    )
    logHelper := log.NewHelper(logger)

	if commonConf == "" || serviceConf == "" {
		logHelper.Fatal("Both -common-conf and -service-conf flags are required.")
	}

    c := config.New(
        config.WithSource(
            file.NewSource(commonConf),
            file.NewSource(serviceConf),
        ),
    )
    defer c.Close()

    if err := c.Load(); err!= nil {
        logHelper.Fatalf("failed to load config: %v", err)
    }

	var bc commoncfgv1.Bootstrap
	if err := c.Scan(&bc); err != nil {
		panic(err)
	}

	app, cleanup, err := wireApp(bc.Server, bc.Data, logger)
	if err != nil {
		panic(err)
	}
	defer cleanup()

	// start and wait for stop signal
	if err := app.Run(); err != nil {
		panic(err)
	}
}
